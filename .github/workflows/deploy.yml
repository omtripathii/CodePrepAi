name: üöÄ Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: ‚úÖ Checkout code
      uses: actions/checkout@v3
      
    - name: üõ†Ô∏è Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: üì¶ Install client dependencies
      run: |
        cd client
        npm ci
        
    - name: üèóÔ∏è Build client
      run: |
        cd client
        npm run build
        
    - name: üì¶ Install server dependencies
      run: |
        cd server
        npm ci
        
    - name: üîë Create SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2.key
        chmod 600 ~/.ssh/ec2.key
        echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
        
    - name: üöÄ Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      run: |
        # Create app directory structure if it doesn't exist
        ssh -i ~/.ssh/ec2.key $EC2_USERNAME@$EC2_HOST "mkdir -p ~/codeprepai"
        
        # Deploy the application
        rsync -avz -e "ssh -i ~/.ssh/ec2.key" --exclude="node_modules" --exclude=".git" ./ $EC2_USERNAME@$EC2_HOST:~/codeprepai/
        
        # Set up environment variables on the server
        ssh -i ~/.ssh/ec2.key $EC2_USERNAME@$EC2_HOST "cat > ~/codeprepai/server/.env << 'EOL'
        MONGODB_URI=${{ secrets.MONGODB_URI }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        JUDGE0_API_KEY=${{ secrets.JUDGE0_API_KEY }}
        NODE_ENV=production
        PORT=5000
        EOL"
        
        # Install dependencies on the server
        ssh -i ~/.ssh/ec2.key $EC2_USERNAME@$EC2_HOST "cd ~/codeprepai/server && npm ci --production"
        
        # Restart PM2 (Gracefully restart if exists, otherwise start)
        ssh -i ~/.ssh/ec2.key $EC2_USERNAME@$EC2_HOST "cd ~/codeprepai/server && pm2 describe server > /dev/null 2>&1 && pm2 reload server || pm2 start ecosystem.config.js"
        
        # Restart Nginx
        ssh -i ~/.ssh/ec2.key $EC2_USERNAME@$EC2_HOST "sudo systemctl restart nginx"
        
    - name: üîç Verify Deployment
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      run: |
        ssh -i ~/.ssh/ec2.key $EC2_USERNAME@$EC2_HOST "cd ~/codeprepai && pm2 status"
        
    - name: ‚ú® Deployment completed
      run: echo "Deployment completed successfully!"