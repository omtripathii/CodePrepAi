name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install & Build Frontend
        run: |
          echo "📦 Installing frontend dependencies..."
          cd client
          npm ci
          echo "🔨 Building frontend..."
          npm run build
          echo "✅ Frontend build complete"

      - name: Create deployment package
        run: |
          echo "📝 Creating deployment package..."

          # Create timestamp for version tracking
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "DEPLOY_TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          # Create minimal deployment directory
          mkdir -p deployment

          # Copy client files - use the contents of dist directly
          echo "📂 Copying frontend files..."
          mkdir -p deployment/client
          cp -r client/dist/* deployment/client/

          # Copy server files - only what's needed
          echo "📂 Copying backend files..."
          mkdir -p deployment/server
          cp -r server/config server/middleware server/models server/routes server/utils deployment/server/
          cp server/server.js deployment/server/
          cp server/package*.json deployment/server/

          # Create version file for tracking
          echo "Version: $TIMESTAMP" > deployment/version.txt
          echo "Commit: ${{ github.sha }}" >> deployment/version.txt
          echo "Deployment Date: $(date)" >> deployment/version.txt

          # Archive for transfer
          cd deployment
          tar -czf ../deploy.tar.gz .

          echo "✅ Deployment package created"

      - name: Deploy to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.tar.gz"
          target: "/home/ubuntu"

      - name: Execute deployment commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "🚀 Starting deployment process..."

            # Create backup of current deployment
            if [ -d "/home/ubuntu/codeprepai" ]; then
              echo "📦 Creating backup of current deployment..."
              timestamp=$(date +%Y%m%d%H%M%S)
              mkdir -p /home/ubuntu/backups
              cp -r /home/ubuntu/codeprepai /home/ubuntu/backups/codeprepai-$timestamp
              
              # Check if backup was successful
              if [ $? -ne 0 ]; then
                echo "❌ Backup failed. Continuing without backup..."
              else
                echo "✅ Backup created at /home/ubuntu/backups/codeprepai-$timestamp"
              fi
            fi

            # Extract new deployment
            cd /home/ubuntu
            echo "📂 Extracting new deployment..."
            mkdir -p /home/ubuntu/codeprepai-new
            tar -xzf deploy.tar.gz -C /home/ubuntu/codeprepai-new
            rm deploy.tar.gz

            # Install server dependencies
            cd /home/ubuntu/codeprepai-new/server
            echo "📦 Installing server dependencies..."
            npm ci --omit=dev

            # Set up environment variables
            echo "🔒 Setting up environment variables..."
            cat << EOF > .env
            NODE_ENV=production
            PORT=5000
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JUDGE0_RAPID_API_KEY=${{ secrets.JUDGE0_API_KEY }}
            EOF

            # Stop the current application
            echo "⏹️ Stopping current application..."
            pm2 describe server > /dev/null
            if [ $? -eq 0 ]; then
              pm2 stop server
            fi

            # Switch to new deployment
            echo "🔄 Switching to new deployment..."
            rm -rf /home/ubuntu/codeprepai
            mv /home/ubuntu/codeprepai-new /home/ubuntu/codeprepai

            # Start or restart application using PM2
            echo "▶️ Starting application..."
            cd /home/ubuntu/codeprepai
            export GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            if pm2 describe server > /dev/null; then
              pm2 restart server --update-env
            else
              pm2 start server/server.js --name server
            fi
            pm2 save

            # Verify application is running
            echo "🔍 Verifying application status..."
            sleep 5
            if ! pm2 list | grep -q "server.*online"; then
              echo "❌ Application failed to start. Rolling back..."
              rm -rf /home/ubuntu/codeprepai
              mv /home/ubuntu/backups/codeprepai-$timestamp /home/ubuntu/codeprepai
              cd /home/ubuntu/codeprepai
              pm2 restart server || pm2 start server/server.js --name server
              echo "✅ Rollback complete"
              exit 1
            fi

            # Set up Nginx SSL configuration
            echo "🔒 Setting up Nginx configuration..."
            sudo tee /etc/nginx/sites-available/codeprepai.dev-om.live > /dev/null << 'EOL'
            # HTTP - Redirect all traffic to HTTPS
            server {
                listen 80;
                server_name codeprepai.dev-om.live www.codeprepai.dev-om.live;
                
                location / {
                    return 301 https://$host$request_uri;
                }
                
                # Required for Let's Encrypt validation
                location /.well-known/acme-challenge/ {
                    root /var/www/html;
                }
            }

            # HTTPS - Serve application securely
            server {
                listen 443 ssl;
                server_name codeprepai.dev-om.live www.codeprepai.dev-om.live;
                
                # SSL Configuration
                ssl_certificate /etc/letsencrypt/live/codeprepai.dev-om.live/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/codeprepai.dev-om.live/privkey.pem;
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_prefer_server_ciphers on;
                ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
                
                # Frontend static files
                location / {
                    root /home/ubuntu/codeprepai/client;
                    index index.html;
                    try_files $uri $uri/ /index.html;
                    
                    # Performance optimizations
                    expires 1d;
                    add_header Cache-Control "public, max-age=86400";
                }
                
                # API proxy
                location /api {
                    proxy_pass http://localhost:5000/api;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                    
                    # Don't cache API responses
                    add_header Cache-Control "no-store, no-cache, must-revalidate";
                }
                
                # Security headers
                add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-XSS-Protection "1; mode=block" always;
                add_header Referrer-Policy "strict-origin-when-cross-origin" always;
                
                # Logging
                access_log /var/log/nginx/codeprepai.access.log;
                error_log /var/log/nginx/codeprepai.error.log;
            }
            EOL

            # Enable site and check Nginx config
            echo "🔧 Enabling Nginx site configuration..."
            sudo ln -sf /etc/nginx/sites-available/codeprepai.dev-om.live /etc/nginx/sites-enabled/
            sudo nginx -t

            if [ $? -ne 0 ]; then
              echo "❌ Nginx configuration test failed. Not restarting Nginx."
            else
              echo "✅ Nginx configuration valid. Restarting service..."
              sudo systemctl restart nginx
            fi

            # Clean up old backups (keep last 3)
            echo "🧹 Cleaning up old backups..."
            cd /home/ubuntu/backups
            ls -t | tail -n +4 | xargs --no-run-if-empty rm -rf

            # Report success
            echo "✅ Deployment successful! Version: $TIMESTAMP"
            echo "🌐 Application is running at: https://codeprepai.dev-om.live"
