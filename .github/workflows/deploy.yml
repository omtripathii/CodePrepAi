name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install & Build Frontend
        run: |
          echo "üì¶ Installing frontend dependencies..."
          cd client
          npm ci
          echo "üî® Building frontend..."
          npm run build
          echo "‚úÖ Frontend build complete"

      - name: Create deployment package
        run: |
          echo "üìù Creating deployment package..."
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "DEPLOY_TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          # Create deployment structure that matches production exactly
          mkdir -p deployment

          # Copy frontend files
          echo "üìÇ Copying frontend files..."
          mkdir -p deployment/client
          cp -r client/dist/* deployment/client/

          # Copy server files
          echo "üìÇ Copying backend files..."
          mkdir -p deployment/server
          cp -r server/config server/middleware server/models server/routes server/utils deployment/server/
          cp server/server.js server/ecosystem.config.js server/package*.json deployment/server/

          # Add Nginx configuration to deployment package
          mkdir -p deployment/nginx
          cat > deployment/nginx/codeprepai.conf << 'EOL'
          # HTTP - Redirect all traffic to HTTPS
          server {
              listen 80;
              server_name codeprepai.dev-om.live www.codeprepai.dev-om.live;
              
              location / {
                  return 301 https://$host$request_uri;
              }
              
              location /.well-known/acme-challenge/ {
                  root /var/www/html;
              }
          }

          # HTTPS - Serve application securely
          server {
              listen 443 ssl;
              server_name codeprepai.dev-om.live www.codeprepai.dev-om.live;
              
              # SSL Configuration
              ssl_certificate /etc/letsencrypt/live/codeprepai.dev-om.live/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/codeprepai.dev-om.live/privkey.pem;
              ssl_protocols TLSv1.2 TLSv1.3;
              
              # Frontend static files
              location / {
                  root /home/ubuntu/codeprepai/client;
                  index index.html;
                  try_files $uri $uri/ /index.html;
              }
              
              # API proxy
              location /api {
                  proxy_pass http://localhost:5000/api;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_cache_bypass $http_upgrade;
              }
              
              access_log /var/log/nginx/codeprepai.access.log;
              error_log /var/log/nginx/codeprepai.error.log;
          }
          EOL

          # Create version file for tracking
          echo "Version: $TIMESTAMP" > deployment/version.txt
          echo "Commit: ${{ github.sha }}" >> deployment/version.txt
          echo "Deployment Date: $(date)" >> deployment/version.txt

          # Create PM2 ecosystem file if not exists
          if [ ! -f "server/ecosystem.config.js" ]; then
            cat > deployment/server/ecosystem.config.js << 'EOL'
            module.exports = {
              apps: [{
                name: "server",
                script: "server.js",
                instances: "max",
                exec_mode: "cluster",
                watch: false,
                env: {
                  NODE_ENV: "production",
                  PORT: 5000
                }
              }]
            }
            EOL
          fi

          # Archive for transfer
          cd deployment
          tar -czf ../deploy.tar.gz .

          echo "‚úÖ Deployment package created"

      - name: Deploy to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.tar.gz"
          target: "/home/ubuntu"

      - name: Execute deployment commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "üöÄ Starting deployment process..."

            # Implement blue-green deployment
            RELEASE_DIR="/home/ubuntu/codeprepai-$(date +%Y%m%d%H%M%S)"
            CURRENT_LINK="/home/ubuntu/codeprepai"
            BACKUP_DIR="/home/ubuntu/backups"

            # Create backup dir if it doesn't exist
            mkdir -p $BACKUP_DIR

            # Extract new deployment to a timestamped directory (blue environment)
            echo "üìÇ Extracting new deployment to $RELEASE_DIR..."
            mkdir -p $RELEASE_DIR
            tar -xzf /home/ubuntu/deploy.tar.gz -C $RELEASE_DIR
            rm /home/ubuntu/deploy.tar.gz

            # Install server dependencies
            echo "üì¶ Installing server dependencies..."
            cd $RELEASE_DIR/server
            npm ci --omit=dev

            # Set up environment variables
            echo "üîí Setting up environment variables..."
            cat << EOF > $RELEASE_DIR/server/.env
            NODE_ENV=production
            PORT=5000
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JUDGE0_RAPID_API_KEY=${{ secrets.JUDGE0_API_KEY }}
            JUDGE0_API_URL=https://judge0-ce.p.rapidapi.com
            EOF

            # Set proper permissions
            echo "üîí Setting file permissions..."
            sudo chown -R www-data:www-data $RELEASE_DIR/client
            sudo chmod -R 755 $RELEASE_DIR/client

            # Test Nginx configuration before applying
            echo "üîß Testing Nginx configuration..."
            sudo cp $RELEASE_DIR/nginx/codeprepai.conf /etc/nginx/sites-available/codeprepai.dev-om.live
            sudo nginx -t

            if [ $? -ne 0 ]; then
              echo "‚ùå Nginx configuration test failed. Aborting deployment."
              exit 1
            fi

            # Enable site if not already enabled
            echo "‚úÖ Nginx configuration valid. Enabling site..."
            sudo ln -sf /etc/nginx/sites-available/codeprepai.dev-om.live /etc/nginx/sites-enabled/

            # Start the new application using PM2
            echo "‚ñ∂Ô∏è Starting new application version..."
            cd $RELEASE_DIR/server
            pm2 start ecosystem.config.js

            # Wait for application to be fully started
            echo "‚è≥ Waiting for application to start..."
            sleep 5

            # Verify new deployment is working
            echo "üîç Verifying new deployment..."
            HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/health)

            if [ "$HEALTH_CHECK" != "200" ]; then
              echo "‚ùå Health check failed with status $HEALTH_CHECK. Rolling back..."
              pm2 delete server
              echo "‚úÖ Rollback complete. Previous version still active."
              exit 1
            fi

            # Gracefully switch from green to blue (atomic symlink swap)
            if [ -d "$CURRENT_LINK" ] && [ ! -L "$CURRENT_LINK" ]; then
              # If it's a directory and not a symlink, back it up
              echo "üì¶ Backing up current deployment..."
              BACKUP_NAME="codeprepai-backup-$(date +%Y%m%d%H%M%S)"
              mv $CURRENT_LINK $BACKUP_DIR/$BACKUP_NAME
            elif [ -L "$CURRENT_LINK" ]; then
              # If it's a symlink, store the previous release for potential rollback
              PREVIOUS=$(readlink $CURRENT_LINK)
              rm $CURRENT_LINK
            fi

            # Create symlink to new release
            ln -sf $RELEASE_DIR $CURRENT_LINK

            # Gracefully reload services
            echo "‚ôªÔ∏è Reloading services..."
            sudo systemctl reload nginx

            # Gracefully stop the old PM2 process if exists
            if [ ! -z "$PREVIOUS" ] && [ -d "$PREVIOUS" ]; then
              cd $PREVIOUS/server
              pm2 describe server > /dev/null 2>&1
              if [ $? -eq 0 ]; then
                echo "‚èπÔ∏è Stopping previous application version..."
                pm2 delete server
              fi
            fi

            # Save PM2 process list
            pm2 save

            # Clean up old deployments (keep last 3)
            echo "üßπ Cleaning up old deployments..."
            cd /home/ubuntu
            ls -td codeprepai-20* | tail -n +4 | xargs --no-run-if-empty sudo rm -rf

            # Clean up old backups (keep last 3)
            cd $BACKUP_DIR
            ls -td * | tail -n +4 | xargs --no-run-if-empty sudo rm -rf

            echo "‚úÖ Deployment successful!"
            echo "üåê Application is running at: https://codeprepai.dev-om.live"
