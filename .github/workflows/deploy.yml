name: üöÄ Deploy CodePrepAI

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: üåü Deploy to Production

    steps:
      - name: ‚öôÔ∏è Deploy using SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            # Print colorful start message
            echo -e "\e[1;34m‚ñ∂Ô∏è Starting CodePrepAI Deployment\e[0m"

            # Use absolute path instead of ~ to avoid issues
            CODE_DIR="$HOME/codeprepai"

            # Check if directory exists, if not create it
            if [ ! -d "$CODE_DIR" ]; then
              echo -e "\e[1;33müìÅ Creating codeprepai directory\e[0m"
              mkdir -p "$CODE_DIR"
            fi

            cd "$CODE_DIR"

            # Check if git repo is initialized, if not clone it
            if [ ! -d ".git" ]; then
              echo -e "\e[1;33müîÑ Initializing git repository\e[0m"
              git init
              git remote add origin https://github.com/omtripathii/CodePrepAi.git
              git fetch || { echo -e "\e[1;31m‚ùå Git fetch failed\e[0m"; exit 1; }
              git checkout -f main || { echo -e "\e[1;31m‚ùå Git checkout failed\e[0m"; exit 1; }
            else
              # Reset any local changes that might block the pull
              echo -e "\e[1;33müßπ Cleaning repository\e[0m"
              git reset --hard HEAD
              git clean -fd
              
              # Update codebase with proper error handling
              echo -e "\e[1;33müì• Pulling latest changes\e[0m"
              git pull origin main || { echo -e "\e[1;31m‚ùå Git pull failed\e[0m"; exit 1; }
            fi

            # Setup environment variables if needed
            echo -e "\e[1;36müîê Setting up environment variables\e[0m"
            if [ ! -f ".env" ]; then
              touch .env
              echo "NODE_ENV=production" >> .env
              # Add more environment variables as needed
            fi

            # Backend setup with better error handling
            echo -e "\e[1;36müõ†Ô∏è Setting up backend\e[0m"
            if [ -d "server" ]; then
              cd server
              echo -e "\e[1;36müßπ Cleaning npm cache\e[0m"
              npm cache clean --force
              echo -e "\e[1;36müì¶ Installing backend dependencies\e[0m"
              npm install --production || { echo -e "\e[1;31m‚ùå Backend installation failed\e[0m"; exit 1; }
              cd "$CODE_DIR"
            else
              echo -e "\e[1;31m‚ùå Server directory not found\e[0m"
              ls -la
              exit 1
            fi

            # Frontend setup with better error handling
            echo -e "\e[1;35müé® Building frontend\e[0m"
            if [ -d "client" ]; then
              cd client
              echo -e "\e[1;35müßπ Cleaning npm cache\e[0m"
              npm cache clean --force
              echo -e "\e[1;35müì¶ Installing frontend dependencies\e[0m"
              npm install --production || { echo -e "\e[1;31m‚ùå Frontend installation failed\e[0m"; exit 1; }
              echo -e "\e[1;35müèóÔ∏è Building frontend app\e[0m"
              npm run build || { echo -e "\e[1;31m‚ùå Frontend build failed\e[0m"; exit 1; }
              cd "$CODE_DIR"
            else
              echo -e "\e[1;31m‚ùå Client directory not found\e[0m"
              ls -la
              exit 1
            fi

            # Restart services
            echo -e "\e[1;32müîÑ Restarting services\e[0m"

            # Check if Nginx is installed and restart
            if command -v nginx &> /dev/null; then
              echo -e "\e[1;32m‚ôªÔ∏è Restarting Nginx\e[0m"
              sudo systemctl restart nginx || { echo -e "\e[1;31m‚ùå Nginx restart failed\e[0m"; exit 1; }
              echo -e "\e[1;32m‚úÖ Nginx restarted\e[0m"
            else
              echo -e "\e[1;33m‚ö†Ô∏è Nginx not found, skipping restart\e[0m"
            fi

            # Check if PM2 is installed and restart
            if command -v pm2 &> /dev/null; then
              # List running processes before restart
              echo -e "\e[1;36müìã Current PM2 processes:\e[0m"
              pm2 list
              
              # Check if server is running with PM2
              if pm2 id server > /dev/null; then
                echo -e "\e[1;32m‚ôªÔ∏è Reloading server process\e[0m"
                cd "$CODE_DIR/server" && pm2 reload server --update-env
              else
                echo -e "\e[1;33müöÄ Starting server process with PM2\e[0m"
                cd "$CODE_DIR/server" && pm2 start npm --name "server" -- start
              fi
              
              echo -e "\e[1;32m‚úÖ PM2 processes updated\e[0m"
            else
              echo -e "\e[1;33m‚ö†Ô∏è PM2 not found, skipping restart\e[0m"
            fi

            echo -e "\e[1;42m ‚úÖ DEPLOYMENT COMPLETED SUCCESSFULLY ‚úÖ \e[0m"
