name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Build Frontend
        run: |
          cd client
          npm ci
          npm run build

      - name: Create deployment package
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          mkdir -p deployment

          # Frontend
          mkdir -p deployment/client
          cp -r client/dist/* deployment/client/

          # Backend
          mkdir -p deployment/server
          cp -r server/config server/middleware server/models server/routes server/utils deployment/server/
          cp server/server.js server/package*.json deployment/server/

          # PM2 ecosystem file
          cat > deployment/server/ecosystem.config.js << 'EOL'
          module.exports = {
            apps: [{
              name: "server",
              script: "server.js",
              instances: "max",
              exec_mode: "cluster",
              env: {
                NODE_ENV: "production",
                PORT: 5000
              }
            }]
          }
          EOL

          # Nginx config
          mkdir -p deployment/nginx
          cat > deployment/nginx/codeprepai.conf << 'EOL'
          server {
              listen 80;
              server_name codeprepai.dev-om.live;
              
              location / {
                  root /home/ubuntu/codeprepai/client;
                  index index.html;
                  try_files $uri $uri/ /index.html;
              }
              
              location /api {
                  proxy_pass http://localhost:5000/api;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
              }
          }
          EOL

          cd deployment
          tar -czf ../deploy.tar.gz .

      - name: Deploy to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.tar.gz"
          target: "/home/ubuntu"

      - name: Execute deployment commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "üöÄ Starting deployment..."

            # Setup directories
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            RELEASE_DIR="/home/ubuntu/codeprepai-${TIMESTAMP}"
            CURRENT_LINK="/home/ubuntu/codeprepai"

            # Extract new deployment
            mkdir -p $RELEASE_DIR
            tar -xzf /home/ubuntu/deploy.tar.gz -C $RELEASE_DIR
            rm /home/ubuntu/deploy.tar.gz

            # Install dependencies
            cd $RELEASE_DIR/server
            npm ci --omit=dev

            # Setup environment variables
            echo "NODE_ENV=production
            PORT=5000
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JUDGE0_RAPID_API_KEY=${{ secrets.JUDGE0_API_KEY }}
            JUDGE0_API_URL=https://judge0-ce.p.rapidapi.com" > .env

            # Test Nginx config
            sudo cp $RELEASE_DIR/nginx/codeprepai.conf /etc/nginx/sites-available/codeprepai.conf
            sudo nginx -t

            if [ $? -eq 0 ]; then
              # Enable site and reload nginx
              sudo ln -sf /etc/nginx/sites-available/codeprepai.conf /etc/nginx/sites-enabled/
              sudo systemctl reload nginx
              
              # Store previous version for rollback
              if [ -L "$CURRENT_LINK" ]; then
                PREVIOUS=$(readlink $CURRENT_LINK)
                rm $CURRENT_LINK
              fi
              
              # Update symlink
              ln -sf $RELEASE_DIR $CURRENT_LINK
              
              # Start new application version
              cd $RELEASE_DIR/server
              pm2 start ecosystem.config.js
              
              # Verify deployment
              sleep 5
              HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/health || echo "000")
              
              if [ "$HEALTH_CHECK" = "200" ]; then
                echo "‚úÖ Deployment successful!"
                
                # Stop old version
                if [ ! -z "$PREVIOUS" ] && [ -d "$PREVIOUS" ]; then
                  cd $PREVIOUS/server
                  pm2 delete server 2>/dev/null || true
                fi
                
                # Save PM2 process list
                pm2 save
                
                # Clean up old deployments (keep last 3)
                cd /home/ubuntu
                ls -td codeprepai-20* | tail -n +4 | xargs --no-run-if-empty rm -rf
              else
                echo "‚ùå Health check failed with status $HEALTH_CHECK. Rolling back..."
                
                # Rollback to previous version
                if [ ! -z "$PREVIOUS" ] && [ -d "$PREVIOUS" ]; then
                  rm -f $CURRENT_LINK
                  ln -sf $PREVIOUS $CURRENT_LINK
                  
                  cd $PREVIOUS/server
                  pm2 start ecosystem.config.js
                fi
                
                # Stop failed version
                cd $RELEASE_DIR/server
                pm2 delete server 2>/dev/null || true
                
                exit 1
              fi
            else
              echo "‚ùå Nginx configuration test failed. Deployment aborted."
              exit 1
            fi
